# Сортировка списка

# В Python можно выполнить сортировку списка на месте с помощью метода sort():

a = [10,3,4,1,9]
a.sort()
print("Сортировка списка: ", a) # [1, 3, 4, 9, 10]

# встроенная функция sorted() не изменяет последовательность, а возвращает новую отсортированную.

print("встроенная функция sorted() возвращает новую отсортированную: ", sorted(a, reverse=True))
print("встроенная функция sorted() возвращает новую отсортированную: ", sorted("qwerty"))

# Сортировка по произвольным элементам вложенных списков
# сортировка будет происходить по первым элементам вложенных списков, то есть в случае матрицы по первому столбцу:

a = [[12,101],[2,200],[18,99]]
a.sort()
print("Сортировка по произвольным элементам вложенных списков", a) # [[2, 200], [12, 101], [18, 99]]

# если надо отсортировать не по первому столбцу, sort() принимает необязательный аргумент key, в котором передается другая функция.

def sort_col(i):
    return i[1]
 
a.sort(key=sort_col)

print(a)

for i in a:
    print("%4d %3d" % (i[0],i[1]))

# Можно не определять обычную функцию, а использовать lambda-функцию:

a.sort(key=lambda x: x[0])
print("отсортировать по первому столбцу: ", a) 
# Вывод: отсортировать по первому столбцу:  [[2, 200], [12, 101], [18, 99]]

a.sort(key=lambda x: x[1])
print("отсортировать не по второму столбцу: ", a) 
# Вывод: отсортировать не по второму столбцу:  [[18, 99], [12, 101], [2, 200]]

b = [(1, 2), (4, 1), (9, 10), (13, -3)]
print(b)

b.sort(key=lambda x: x[1])
print("использовать lambda-функцию: ", b) # Вывод: [(13, -3), (4, 1), (1, 2), (9, 10)]

